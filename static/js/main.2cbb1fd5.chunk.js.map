{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","constants.js","components/CounterButton.js","components/Header.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","error","info","this","setError","hasError","Component","connect","state","getRobots","dispatch","text","payload","errorHappened","CounterButton","updateCount","setState","count","nextProps","nextState","onClick","color","Header","App","onRequsetRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","searchRobots","event","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2cbb1fd5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// if (true) {\n\t// \tthrow new Error('NOOOOOOO');\n\t// }\n\treturn (\n\t\t<>\n\t\t\t{\n\t\t\t\trobots.map((user, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tid={user.id}\n\t\t\t\t\t\t\tname={user.name}\n\t\t\t\t\t\t\temail={user.email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<label className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</label>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { errorHappened } from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\thasError: state.getRobots.error\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tsetError: (text) => dispatch(errorHappened(text))\n\t}\n}\n\nclass ErrorBoundry extends Component {\n\tcomponentDidCatch(error, info) {\n\t\tthis.props.setError('text');\n\t}\n\n\trender() {\n\t\tif (this.props.hasError) {\n\t\t\treturn <h1>Oooops. That is not good</h1>;\n\t\t}\n\t\telse {\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorBoundry);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    ERROR_HAPPEND\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\nexport const errorHappened = (text) => ({\n    type: ERROR_HAPPEND,\n    payload: text\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport const ERROR_HAPPEND = 'ERROR_HAPPEND';","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1 }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.updateCount} color={this.props.color} >\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header'\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.getRobots.robots,\n\t\tisPending: state.getRobots.isPending,\n\t\terror: state.getRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequsetRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequsetRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\treturn isPending ? <h1>Loading</h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    ERROR_HAPPEND\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const getRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        case ERROR_HAPPEND:\n            return Object.assign({}, state, { error: action.payload })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, getRobots } from './reducers';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({ searchRobots, getRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}